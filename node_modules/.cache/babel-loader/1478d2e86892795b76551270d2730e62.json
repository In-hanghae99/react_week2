{"ast":null,"code":"import { db } from \"../../firebase\";\nimport { collection, doc, getDoc, getDocs, addDoc, updateDoc, deleteDoc } from \"firebase/firestore\"; //Action Type\n\nconst LOAD = \"dictionary/LOAD\";\nconst CREATE = \"dictionary/CREATE\";\nconst DELETE = \"dictionary/DELETE\";\nconst initialState = {\n  list: [\"영화관 가기\", \"매일 책읽기\", \"수영 배우기\"]\n}; //Action Creator\n\nexport const loadDictionary = dictionary_list => {\n  return {\n    type: LOAD,\n    dictionary_list\n  };\n};\nexport const createDictionary = dictionary => {\n  return {\n    type: CREATE,\n    dictionary\n  };\n};\nexport const deleteDictionary = dictionary_index => {\n  return {\n    type: DELETE,\n    dictionary_index\n  };\n}; //middlewares\n\nexport const loadDictionaryFB = () => {\n  return async function (dispatch) {\n    const dictionary_data = await getDocs(collection(db, \"dictionary\"));\n    console.log(dictionary_data);\n    let dictionary_list = [];\n    dictionary_list.forEach(b => {\n      console.log(b.data());\n      dictionary_list.pust({\n        id: b.id,\n        ...b.data\n      });\n    });\n    dispatch(loadDictionary(dictionary_list));\n  };\n}; // Reducer\n\nexport default function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    // do reducer stuff\n    case \"dictionary/LOAD\":\n      // return { list: action.dictionary_list };\n      return state;\n\n    case \"dictionary/CREATE\":\n      {\n        const new_dictionary_list = [...state.list, action.dictionary];\n        return {\n          list: new_dictionary_list\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/bong/sparta/react_week2/dictionary/src/redux/modules/dictionary.js"],"names":["db","collection","doc","getDoc","getDocs","addDoc","updateDoc","deleteDoc","LOAD","CREATE","DELETE","initialState","list","loadDictionary","dictionary_list","type","createDictionary","dictionary","deleteDictionary","dictionary_index","loadDictionaryFB","dispatch","dictionary_data","console","log","forEach","b","data","pust","id","reducer","state","action","new_dictionary_list"],"mappings":"AAAA,SAASA,EAAT,QAAmB,gBAAnB;AACA,SACEC,UADF,EAEEC,GAFF,EAGEC,MAHF,EAIEC,OAJF,EAKEC,MALF,EAMEC,SANF,EAOEC,SAPF,QAQO,oBARP,C,CAUA;;AACA,MAAMC,IAAI,GAAG,iBAAb;AACA,MAAMC,MAAM,GAAG,mBAAf;AACA,MAAMC,MAAM,GAAG,mBAAf;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB;AADa,CAArB,C,CAIA;;AACA,OAAO,MAAMC,cAAc,GAAIC,eAAD,IAAqB;AACjD,SAAO;AAAEC,IAAAA,IAAI,EAAEP,IAAR;AAAcM,IAAAA;AAAd,GAAP;AACD,CAFM;AAIP,OAAO,MAAME,gBAAgB,GAAIC,UAAD,IAAgB;AAC9C,SAAO;AAAEF,IAAAA,IAAI,EAAEN,MAAR;AAAgBQ,IAAAA;AAAhB,GAAP;AACD,CAFM;AAIP,OAAO,MAAMC,gBAAgB,GAAIC,gBAAD,IAAsB;AACpD,SAAO;AAAEJ,IAAAA,IAAI,EAAEL,MAAR;AAAgBS,IAAAA;AAAhB,GAAP;AACD,CAFM,C,CAIP;;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AACpC,SAAO,gBAAgBC,QAAhB,EAA0B;AAC/B,UAAMC,eAAe,GAAG,MAAMlB,OAAO,CAACH,UAAU,CAACD,EAAD,EAAK,YAAL,CAAX,CAArC;AACAuB,IAAAA,OAAO,CAACC,GAAR,CAAYF,eAAZ;AAEA,QAAIR,eAAe,GAAG,EAAtB;AAEAA,IAAAA,eAAe,CAACW,OAAhB,CAAyBC,CAAD,IAAO;AAC7BH,MAAAA,OAAO,CAACC,GAAR,CAAYE,CAAC,CAACC,IAAF,EAAZ;AACAb,MAAAA,eAAe,CAACc,IAAhB,CAAqB;AAAEC,QAAAA,EAAE,EAAEH,CAAC,CAACG,EAAR;AAAY,WAAGH,CAAC,CAACC;AAAjB,OAArB;AACD,KAHD;AAKAN,IAAAA,QAAQ,CAACR,cAAc,CAACC,eAAD,CAAf,CAAR;AACD,GAZD;AAaD,CAdM,C,CAgBP;;AACA,eAAe,SAASgB,OAAT,GAAoD;AAAA,MAAnCC,KAAmC,uEAA3BpB,YAA2B;AAAA,MAAbqB,MAAa,uEAAJ,EAAI;;AACjE,UAAQA,MAAM,CAACjB,IAAf;AACE;AACA,SAAK,iBAAL;AACE;AACA,aAAOgB,KAAP;;AACF,SAAK,mBAAL;AAA0B;AACxB,cAAME,mBAAmB,GAAG,CAAC,GAAGF,KAAK,CAACnB,IAAV,EAAgBoB,MAAM,CAACf,UAAvB,CAA5B;AACA,eAAO;AAAEL,UAAAA,IAAI,EAAEqB;AAAR,SAAP;AACD;;AAED;AACE,aAAOF,KAAP;AAXJ;AAaD","sourcesContent":["import { db } from \"../../firebase\";\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n} from \"firebase/firestore\";\n\n//Action Type\nconst LOAD = \"dictionary/LOAD\";\nconst CREATE = \"dictionary/CREATE\";\nconst DELETE = \"dictionary/DELETE\";\n\nconst initialState = {\n  list: [\"영화관 가기\", \"매일 책읽기\", \"수영 배우기\"],\n};\n\n//Action Creator\nexport const loadDictionary = (dictionary_list) => {\n  return { type: LOAD, dictionary_list };\n};\n\nexport const createDictionary = (dictionary) => {\n  return { type: CREATE, dictionary };\n};\n\nexport const deleteDictionary = (dictionary_index) => {\n  return { type: DELETE, dictionary_index };\n};\n\n//middlewares\nexport const loadDictionaryFB = () => {\n  return async function (dispatch) {\n    const dictionary_data = await getDocs(collection(db, \"dictionary\"));\n    console.log(dictionary_data);\n\n    let dictionary_list = [];\n\n    dictionary_list.forEach((b) => {\n      console.log(b.data());\n      dictionary_list.pust({ id: b.id, ...b.data });\n    });\n\n    dispatch(loadDictionary(dictionary_list));\n  };\n};\n\n// Reducer\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    // do reducer stuff\n    case \"dictionary/LOAD\":\n      // return { list: action.dictionary_list };\n      return state;\n    case \"dictionary/CREATE\": {\n      const new_dictionary_list = [...state.list, action.dictionary];\n      return { list: new_dictionary_list };\n    }\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}