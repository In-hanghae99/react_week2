[{"/Users/bong/sparta/react_week2/dictionary/src/index.js":"1","/Users/bong/sparta/react_week2/dictionary/src/reportWebVitals.js":"2","/Users/bong/sparta/react_week2/dictionary/src/App.js":"3","/Users/bong/sparta/react_week2/dictionary/src/List.js":"4","/Users/bong/sparta/react_week2/dictionary/src/firebase.js":"5","/Users/bong/sparta/react_week2/dictionary/src/redux/modules/dictionary.js":"6","/Users/bong/sparta/react_week2/dictionary/src/redux/configStore.js":"7","/Users/bong/sparta/react_week2/dictionary/src/AddWord.js":"8","/Users/bong/sparta/react_week2/dictionary/src/UpdateDictionary.js":"9","/Users/bong/sparta/react_week2/dictionary/src/Spinner.js":"10"},{"size":672,"mtime":1643636335877,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1643589788720,"results":"13","hashOfConfig":"12"},{"size":1058,"mtime":1643850256055,"results":"14","hashOfConfig":"12"},{"size":2862,"mtime":1643848479495,"results":"15","hashOfConfig":"12"},{"size":981,"mtime":1643610133876,"results":"16","hashOfConfig":"12"},{"size":3713,"mtime":1643850613898,"results":"17","hashOfConfig":"12"},{"size":360,"mtime":1643636285809,"results":"18","hashOfConfig":"12"},{"size":1912,"mtime":1643716419897,"results":"19","hashOfConfig":"12"},{"size":2133,"mtime":1643818410128,"results":"20","hashOfConfig":"12"},{"size":495,"mtime":1643849982044,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"1gicp3m",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"25"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/bong/sparta/react_week2/dictionary/src/index.js",[],[],["57","58"],"/Users/bong/sparta/react_week2/dictionary/src/reportWebVitals.js",[],[],"/Users/bong/sparta/react_week2/dictionary/src/App.js",["59","60","61","62","63","64","65","66","67","68"],[],"import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loadDictionary, loadDictionaryFB } from \"./redux/modules/dictionary\";\n\n//Home 화면 import\nimport List from \"./List\";\nimport AddWord from \"./AddWord\";\nimport { db } from \"./firebase\";\nimport {\n  collection,\n  getDoc,\n  getDocs,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n} from \"firebase/firestore\";\nimport UpdateDictionary from \"./UpdateDictionary\";\nimport Spinner from \"./Spinner\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const is_loaded = useSelector((state) => state.dictionary.is_loaded);\n  console.log(is_loaded);\n  React.useEffect(async () => {\n    dispatch(loadDictionaryFB());\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" exact>\n        <List />\n      </Route>\n      <Route path=\"/add\">\n        <AddWord />\n      </Route>\n      <Route path=\"/updateDictionary/:id\">\n        <UpdateDictionary />\n      </Route>\n      {!is_loaded && <Spinner />}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/bong/sparta/react_week2/dictionary/src/List.js",[],[],"/Users/bong/sparta/react_week2/dictionary/src/firebase.js",["69"],[],"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getFirestore } from \"firebase/firestore\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCgQWAkeJNrSsb_RhYbrPpNOK97V_WHihM\",\n  authDomain: \"sparta-react-basic-6882f.firebaseapp.com\",\n  projectId: \"sparta-react-basic-6882f\",\n  storageBucket: \"sparta-react-basic-6882f.appspot.com\",\n  messagingSenderId: \"1039492465815\",\n  appId: \"1:1039492465815:web:85259e49634bc6c6c915d2\",\n  measurementId: \"G-VSYDN1KQ2D\",\n};\n\ninitializeApp(firebaseConfig);\n// Initialize Firebase\n// const app = initializeApp(firebaseConfig);\n// const analytics = getAnalytics(app);\n\nexport const db = getFirestore();\n","/Users/bong/sparta/react_week2/dictionary/src/redux/modules/dictionary.js",["70"],[],"import { db } from \"../../firebase\";\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n} from \"firebase/firestore\";\n\n//Action Type\nconst LOAD = \"dictionary/LOAD\";\nconst CREATE = \"dictionary/CREATE\";\nconst DELETE = \"dictionary/DELETE\";\nconst UPDATE = \"dictionary/UPDATE\";\nconst LOADED = \"dictionary/LOADED\";\n\nconst initialState = {\n  is_loaded: false,\n  list: [],\n};\n\n//Action Creator\nexport const loadDictionary = (dictionary_list) => {\n  return { type: LOAD, dictionary_list };\n};\n\nexport const createDictionary = (dictionary) => {\n  return { type: CREATE, dictionary };\n};\n\nexport const deleteDictionary = (dictionary_index) => {\n  return { type: DELETE, dictionary_index };\n};\n\nexport function updateDictionary(dictionary_id, word, explanation, example) {\n  return {\n    type: UPDATE,\n    dictionary_id,\n    word,\n    explanation,\n    example,\n  };\n}\n\nexport function loadedDictionary(loaded) {\n  return {\n    type: LOADED,\n    loaded,\n  };\n}\n\n//middlewares\nexport const loadDictionaryFB = () => {\n  return async function (dispatch) {\n    const dictionary_data = await getDocs(collection(db, \"dictionary\"));\n\n    let dictionary_list = [];\n\n    dictionary_data.forEach((doc) => {\n      dictionary_list.push({ id: doc.id, ...doc.data() });\n      console.log(doc.data());\n    });\n    console.log(dictionary_list);\n    dispatch(loadDictionary(dictionary_list));\n  };\n};\n\n//추가\nexport const addDictionaryFB = (dictionary) => {\n  return async function (dispatch) {\n    dispatch(loadedDictionary(false));\n    const docRef = await addDoc(collection(db, \"dictionary\"), dictionary);\n    const dictionary_data = { id: docRef.id, ...dictionary };\n    dispatch(createDictionary(dictionary_data));\n  };\n};\n\n//삭제\nexport const deleteDictionaryFB = (dictionary_id) => {\n  return async function (dispatch) {\n    const docRef = doc(db, \"dictionary\", dictionary_id);\n    await deleteDoc(docRef);\n    dispatch(deleteDictionary(dictionary_id));\n  };\n};\n\n//업데이트\nexport const updateDictionaryFB = (\n  dictionary_id,\n  word,\n  explanation,\n  example\n) => {\n  return async function (dispatch, getState) {\n    if (!dictionary_id) {\n      window.alert(\"아이디가 없습니다.\");\n      return;\n    }\n\n    const docRef = doc(db, \"dictionary\", dictionary_id);\n    // 어떤 걸 수정 할 지 document를 집어온다.\n\n    await updateDoc(docRef, {\n      word: word,\n      explanation: explanation,\n      example: example,\n    });\n\n    dispatch(updateDictionary(dictionary_id, word, explanation, example));\n  };\n};\n\n// Reducer\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    // do reducer stuff\n    case \"dictionary/LOADED\": {\n      return { ...state, is_loaded: action.loaded };\n    }\n    case \"dictionary/LOAD\":\n      return { list: action.dictionary_list, is_loaded: true };\n    case \"dictionary/CREATE\": {\n      const new_dictionary_list = [...state.list, action.dictionary];\n      return { list: new_dictionary_list, is_loaded: true };\n    }\n    case \"dictionary/UPDATE\": {\n      const new_dictionary_list = state.list.map((item, i) => {\n        if (item.id === action.dictionary_id) {\n          return {\n            ...item,\n            word: action.word,\n            explanation: action.explanation,\n            example: action.example,\n          };\n        } else {\n          return item;\n        }\n      });\n      return { ...state, list: new_dictionary_list };\n    }\n    case \"dictionary/DELETE\": {\n      const new_dictionary_list = state.list.filter((item, i) => {\n        return item.id !== action.dictionary_id;\n      });\n      return { ...state, list: new_dictionary_list };\n    }\n    default:\n      return state;\n  }\n}\n","/Users/bong/sparta/react_week2/dictionary/src/redux/configStore.js",[],[],"/Users/bong/sparta/react_week2/dictionary/src/AddWord.js",[],[],"/Users/bong/sparta/react_week2/dictionary/src/UpdateDictionary.js",["71"],[],"import React, { useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { updateDictionaryFB } from \"./redux/modules/dictionary\";\n\nconst UpdateDictionary = () => {\n  let wordRef = useRef();\n  let explanationRef = useRef();\n  let exampleRef = useRef();\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const { id } = useParams();\n\n  const dictionary_list = useSelector((state) => state.dictionary.list);\n\n  //수정 기능\n  const updateBtn = () => {\n    let wordVal = wordRef.current.value;\n    let explanationVal = explanationRef.current.value;\n    let exampleVal = exampleRef.current.value;\n    dispatch(updateDictionaryFB(id, wordVal, explanationVal, exampleVal));\n\n    history.push(\"/\");\n  };\n  return (\n    <div\n      style={{\n        backgroundColor: \"#eee\",\n        height: \"100vh\",\n        width: \"100vw\",\n        display: \"flex\",\n      }}\n    >\n      <div\n        style={{\n          backgroundColor: \"#fff\",\n          width: \"50vw\",\n          maxWidth: \"350px\",\n          margin: \"10vh auto\",\n          height: \"30vh\",\n          padding: \"16px\",\n          border: \"1px solid #ddd\",\n          borderRadius: \"5px\",\n          textAlign: \"center\",\n        }}\n      >\n        <h2 style={{ color: \"blue\" }}>단어 수정하기</h2>\n        <hr style={{ margin: \"16px 0px\" }}></hr>\n        <form>\n          <div style={{ padding: \"10px\" }}>\n            <label>단어</label>\n            <input ref={wordRef} type=\"text\"></input>\n          </div>\n          <div style={{ padding: \"10px\" }}>\n            <label>설명</label>\n            <input ref={explanationRef} type=\"text\"></input>\n          </div>\n          <div style={{ padding: \"10px\" }}>\n            <label>예시</label>\n            <input ref={exampleRef} type=\"text\"></input>\n          </div>\n          <button\n            onClick={() => {\n              updateBtn();\n            }}\n            style={{ padding: \"10px\" }}\n          >\n            수정하기\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default UpdateDictionary;\n","/Users/bong/sparta/react_week2/dictionary/src/Spinner.js",[],[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":4,"column":10,"nodeType":"78","messageId":"79","endLine":4,"endColumn":24},{"ruleId":"76","severity":1,"message":"80","line":9,"column":10,"nodeType":"78","messageId":"79","endLine":9,"endColumn":12},{"ruleId":"76","severity":1,"message":"81","line":11,"column":3,"nodeType":"78","messageId":"79","endLine":11,"endColumn":13},{"ruleId":"76","severity":1,"message":"82","line":12,"column":3,"nodeType":"78","messageId":"79","endLine":12,"endColumn":9},{"ruleId":"76","severity":1,"message":"83","line":13,"column":3,"nodeType":"78","messageId":"79","endLine":13,"endColumn":10},{"ruleId":"76","severity":1,"message":"84","line":14,"column":3,"nodeType":"78","messageId":"79","endLine":14,"endColumn":9},{"ruleId":"76","severity":1,"message":"85","line":15,"column":3,"nodeType":"78","messageId":"79","endLine":15,"endColumn":12},{"ruleId":"76","severity":1,"message":"86","line":16,"column":3,"nodeType":"78","messageId":"79","endLine":16,"endColumn":12},{"ruleId":"87","severity":1,"message":"88","line":25,"column":19,"nodeType":"89","endLine":27,"endColumn":4},{"ruleId":"87","severity":1,"message":"90","line":27,"column":6,"nodeType":"91","endLine":27,"endColumn":8,"suggestions":"92"},{"ruleId":"76","severity":1,"message":"93","line":3,"column":10,"nodeType":"78","messageId":"79","endLine":3,"endColumn":22},{"ruleId":"76","severity":1,"message":"82","line":5,"column":3,"nodeType":"78","messageId":"79","endLine":5,"endColumn":9},{"ruleId":"76","severity":1,"message":"94","line":16,"column":9,"nodeType":"78","messageId":"79","endLine":16,"endColumn":24},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'loadDictionary' is defined but never used.","Identifier","unusedVar","'db' is defined but never used.","'collection' is defined but never used.","'getDoc' is defined but never used.","'getDocs' is defined but never used.","'addDoc' is defined but never used.","'updateDoc' is defined but never used.","'deleteDoc' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["97"],"'getAnalytics' is defined but never used.","'dictionary_list' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},"Update the dependencies array to be: [dispatch]",{"range":"100","text":"101"},[729,731],"[dispatch]"]