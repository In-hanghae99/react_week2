{"ast":null,"code":"import { db } from \"../../firebase\";\nimport { collection, doc, getDoc, getDocs, addDoc, updateDoc, deleteDoc } from \"firebase/firestore\"; //Action Type\n\nconst LOAD = \"dictionary/LOAD\";\nconst CREATE = \"dictionary/CREATE\";\nconst DELETE = \"dictionary/DELETE\";\nconst UPDATE = \"dictionary/UPDATE\";\nconst initialState = {\n  is_loaded: false,\n  list: [{\n    word: \"aaa\",\n    explanation: \"aaa\",\n    example: \"aaa\"\n  }, {\n    word: \"bbb\",\n    explanation: \"bbb\",\n    example: \"bbb\"\n  }, {\n    word: \"ccc\",\n    explanation: \"ccc\",\n    example: \"ccc\"\n  }, {\n    word: \"ddd\",\n    explanation: \"ddd\",\n    example: \"ddd\"\n  }, {\n    word: \"eee\",\n    explanation: \"eee\",\n    example: \"eee\"\n  }, {\n    word: \"fff\",\n    explanation: \"fff\",\n    example: \"fff\"\n  }]\n}; //Action Creator\n\nexport const loadDictionary = dictionary_list => {\n  return {\n    type: LOAD,\n    dictionary_list\n  };\n};\nexport const createDictionary = dictionary => {\n  return {\n    type: CREATE,\n    dictionary\n  };\n};\nexport const deleteDictionary = dictionary_index => {\n  return {\n    type: DELETE,\n    dictionary_index\n  };\n};\nexport function updateDictionary(dictionary_id, word, explanation, example) {\n  return {\n    type: UPDATE,\n    dictionary_id,\n    word,\n    explanation,\n    example\n  };\n} //middlewares\n\nexport const loadDictionaryFB = () => {\n  return async function (dispatch) {\n    const dictionary_data = await getDocs(collection(db, \"dictionary\"));\n    let dictionary_list = [];\n    dictionary_data.forEach(doc => {\n      dictionary_list.push({\n        id: doc.id,\n        ...doc.data()\n      });\n      console.log(doc.data());\n    });\n    console.log(dictionary_list);\n    dispatch(loadDictionary(dictionary_list));\n  };\n}; //추가\n\nexport const addDictionaryFB = dictionary => {\n  return async function (dispatch) {\n    const docRef = await addDoc(collection(db, \"dictionary\"), dictionary);\n    const dictionary_data = {\n      id: docRef.id,\n      ...dictionary\n    };\n    dispatch(createDictionary(dictionary_data));\n  };\n}; //삭제\n\nexport const deleteDictionaryFB = dictionary_id => {\n  return async function (dispatch) {\n    const docRef = doc(db, \"dictionary\", dictionary_id);\n    await deleteDoc(docRef);\n    dispatch(deleteDictionary(dictionary_id));\n  };\n}; //업데이트\n\nexport const updateDictionaryFB = (dictionary_id, word, explanation, example) => {\n  return async function (dispatch, getState) {\n    if (!dictionary_id) {\n      window.alert(\"아이디가 없습니다.\");\n      return;\n    }\n\n    const docRef = doc(db, \"dictionary\", dictionary_id); // 어떤 걸 수정 할 지 document를 집어온다.\n\n    await updateDoc(docRef, {\n      word: word,\n      explanation: explanation,\n      example: example\n    });\n    dispatch(updateDictionary(dictionary_id, word, explanation, example));\n  };\n}; // Reducer\n\nexport default function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    // do reducer stuff\n    case \"dictionary/LOAD\":\n      return {\n        list: action.dictionary_list,\n        isloaded: true\n      };\n\n    case \"dictionary/CREATE\":\n      {\n        const new_dictionary_list = [...state.list, action.dictionary];\n        return {\n          list: new_dictionary_list\n        };\n      }\n\n    case \"dictionary/UPDATE\":\n      {\n        const new_dictionary_list = state.list.map((item, i) => {\n          if (item.id === action.dictionary_id) {\n            return { ...item,\n              word: action.word,\n              explanation: action.explanation,\n              example: action.example\n            };\n          } else {\n            return item;\n          }\n        });\n        return { ...state,\n          list: new_dictionary_list\n        };\n      }\n\n    case \"dictionary/DELETE\":\n      {\n        const new_dictionary_list = state.list.filter((item, i) => {\n          return item.id !== action.dictionary_id;\n        });\n        return { ...state,\n          list: new_dictionary_list\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/bong/sparta/react_week2/dictionary/src/redux/modules/dictionary.js"],"names":["db","collection","doc","getDoc","getDocs","addDoc","updateDoc","deleteDoc","LOAD","CREATE","DELETE","UPDATE","initialState","is_loaded","list","word","explanation","example","loadDictionary","dictionary_list","type","createDictionary","dictionary","deleteDictionary","dictionary_index","updateDictionary","dictionary_id","loadDictionaryFB","dispatch","dictionary_data","forEach","push","id","data","console","log","addDictionaryFB","docRef","deleteDictionaryFB","updateDictionaryFB","getState","window","alert","reducer","state","action","isloaded","new_dictionary_list","map","item","i","filter"],"mappings":"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","sourcesContent":["import { db } from \"../../firebase\";\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n} from \"firebase/firestore\";\n\n//Action Type\nconst LOAD = \"dictionary/LOAD\";\nconst CREATE = \"dictionary/CREATE\";\nconst DELETE = \"dictionary/DELETE\";\nconst UPDATE = \"dictionary/UPDATE\";\n\nconst initialState = {\n  is_loaded: false,\n  list: [\n    { word: \"aaa\", explanation: \"aaa\", example: \"aaa\" },\n    { word: \"bbb\", explanation: \"bbb\", example: \"bbb\" },\n    { word: \"ccc\", explanation: \"ccc\", example: \"ccc\" },\n    { word: \"ddd\", explanation: \"ddd\", example: \"ddd\" },\n    { word: \"eee\", explanation: \"eee\", example: \"eee\" },\n    { word: \"fff\", explanation: \"fff\", example: \"fff\" },\n  ],\n};\n\n//Action Creator\nexport const loadDictionary = (dictionary_list) => {\n  return { type: LOAD, dictionary_list };\n};\n\nexport const createDictionary = (dictionary) => {\n  return { type: CREATE, dictionary };\n};\n\nexport const deleteDictionary = (dictionary_index) => {\n  return { type: DELETE, dictionary_index };\n};\n\nexport function updateDictionary(dictionary_id, word, explanation, example) {\n  return {\n    type: UPDATE,\n    dictionary_id,\n    word,\n    explanation,\n    example,\n  };\n}\n\n//middlewares\nexport const loadDictionaryFB = () => {\n  return async function (dispatch) {\n    const dictionary_data = await getDocs(collection(db, \"dictionary\"));\n\n    let dictionary_list = [];\n\n    dictionary_data.forEach((doc) => {\n      dictionary_list.push({ id: doc.id, ...doc.data() });\n      console.log(doc.data());\n    });\n    console.log(dictionary_list);\n    dispatch(loadDictionary(dictionary_list));\n  };\n};\n\n//추가\nexport const addDictionaryFB = (dictionary) => {\n  return async function (dispatch) {\n    const docRef = await addDoc(collection(db, \"dictionary\"), dictionary);\n    const dictionary_data = { id: docRef.id, ...dictionary };\n    dispatch(createDictionary(dictionary_data));\n  };\n};\n\n//삭제\nexport const deleteDictionaryFB = (dictionary_id) => {\n  return async function (dispatch) {\n    const docRef = doc(db, \"dictionary\", dictionary_id);\n    await deleteDoc(docRef);\n    dispatch(deleteDictionary(dictionary_id));\n  };\n};\n\n//업데이트\nexport const updateDictionaryFB = (\n  dictionary_id,\n  word,\n  explanation,\n  example\n) => {\n  return async function (dispatch, getState) {\n    if (!dictionary_id) {\n      window.alert(\"아이디가 없습니다.\");\n      return;\n    }\n\n    const docRef = doc(db, \"dictionary\", dictionary_id);\n    // 어떤 걸 수정 할 지 document를 집어온다.\n\n    await updateDoc(docRef, {\n      word: word,\n      explanation: explanation,\n      example: example,\n    });\n\n    dispatch(updateDictionary(dictionary_id, word, explanation, example));\n  };\n};\n\n// Reducer\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    // do reducer stuff\n    case \"dictionary/LOAD\":\n      return { list: action.dictionary_list, isloaded: true };\n    case \"dictionary/CREATE\": {\n      const new_dictionary_list = [...state.list, action.dictionary];\n      return { list: new_dictionary_list };\n    }\n    case \"dictionary/UPDATE\": {\n      const new_dictionary_list = state.list.map((item, i) => {\n        if (item.id === action.dictionary_id) {\n          return {\n            ...item,\n            word: action.word,\n            explanation: action.explanation,\n            example: action.example,\n          };\n        } else {\n          return item;\n        }\n      });\n      return { ...state, list: new_dictionary_list };\n    }\n    case \"dictionary/DELETE\": {\n      const new_dictionary_list = state.list.filter((item, i) => {\n        return item.id !== action.dictionary_id;\n      });\n      return { ...state, list: new_dictionary_list };\n    }\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}