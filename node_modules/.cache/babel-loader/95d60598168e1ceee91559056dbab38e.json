{"ast":null,"code":"import { db } from \"../../firebase\";\nimport { collection, doc, getDoc, getDocs, addDoc, updateDoc, deleteDoc } from \"firebase/firestore\"; //Action Type\n\nconst LOAD = \"dictionary/LOAD\";\nconst CREATE = \"dictionary/CREATE\";\nconst DELETE = \"dictionary/DELETE\";\nconst initialState = {\n  list: [{\n    word: \"aaa\",\n    explanation: \"aaa\",\n    example: \"aaa\"\n  }, {\n    word: \"bbb\",\n    explanation: \"bbb\",\n    example: \"bbb\"\n  }, {\n    word: \"ccc\",\n    explanation: \"ccc\",\n    example: \"ccc\"\n  }, {\n    word: \"ddd\",\n    explanation: \"ddd\",\n    example: \"ddd\"\n  }, {\n    word: \"eee\",\n    explanation: \"eee\",\n    example: \"eee\"\n  }, {\n    word: \"fff\",\n    explanation: \"fff\",\n    example: \"fff\"\n  }]\n}; //Action Creator\n\nexport const loadDictionary = dictionary_list => {\n  return {\n    type: LOAD,\n    dictionary_list\n  };\n};\nexport const createDictionary = dictionary => {\n  return {\n    type: CREATE,\n    dictionary\n  };\n};\nexport const deleteDictionary = dictionary_index => {\n  return {\n    type: DELETE,\n    dictionary_index\n  };\n}; //middlewares\n\nexport const loadDictionaryFB = () => {\n  return async function (dispatch) {\n    const dictionary_data = await getDocs(collection(db, \"dictionary\"));\n    let dictionary_list = [];\n    dictionary_data.forEach(doc => {\n      dictionary_list.pust({\n        id: doc.id,\n        ...doc.data()\n      });\n      console.log(doc.data());\n    });\n    console.log(dictionary_list);\n    dispatch(loadDictionary(dictionary_list));\n  };\n}; // Reducer\n\nexport default function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    // do reducer stuff\n    case \"dictionary/LOAD\":\n      return {\n        list: action.dictionary_list\n      };\n\n    case \"dictionary/CREATE\":\n      {\n        const new_dictionary_list = [...state.list, action.dictionary];\n        return {\n          list: new_dictionary_list\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/bong/sparta/react_week2/dictionary/src/redux/modules/dictionary.js"],"names":["db","collection","doc","getDoc","getDocs","addDoc","updateDoc","deleteDoc","LOAD","CREATE","DELETE","initialState","list","word","explanation","example","loadDictionary","dictionary_list","type","createDictionary","dictionary","deleteDictionary","dictionary_index","loadDictionaryFB","dispatch","dictionary_data","forEach","pust","id","data","console","log","reducer","state","action","new_dictionary_list"],"mappings":"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","sourcesContent":["import { db } from \"../../firebase\";\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n} from \"firebase/firestore\";\n\n//Action Type\nconst LOAD = \"dictionary/LOAD\";\nconst CREATE = \"dictionary/CREATE\";\nconst DELETE = \"dictionary/DELETE\";\n\nconst initialState = {\n  list: [\n    { word: \"aaa\", explanation: \"aaa\", example: \"aaa\" },\n    { word: \"bbb\", explanation: \"bbb\", example: \"bbb\" },\n    { word: \"ccc\", explanation: \"ccc\", example: \"ccc\" },\n    { word: \"ddd\", explanation: \"ddd\", example: \"ddd\" },\n    { word: \"eee\", explanation: \"eee\", example: \"eee\" },\n    { word: \"fff\", explanation: \"fff\", example: \"fff\" },\n  ],\n};\n\n//Action Creator\nexport const loadDictionary = (dictionary_list) => {\n  return { type: LOAD, dictionary_list };\n};\n\nexport const createDictionary = (dictionary) => {\n  return { type: CREATE, dictionary };\n};\n\nexport const deleteDictionary = (dictionary_index) => {\n  return { type: DELETE, dictionary_index };\n};\n\n//middlewares\nexport const loadDictionaryFB = () => {\n  return async function (dispatch) {\n    const dictionary_data = await getDocs(collection(db, \"dictionary\"));\n\n    let dictionary_list = [];\n\n    dictionary_data.forEach((doc) => {\n      dictionary_list.pust({ id: doc.id, ...doc.data() });\n      console.log(doc.data());\n    });\n    console.log(dictionary_list);\n    dispatch(loadDictionary(dictionary_list));\n  };\n};\n\n// Reducer\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    // do reducer stuff\n    case \"dictionary/LOAD\":\n      return { list: action.dictionary_list };\n    case \"dictionary/CREATE\": {\n      const new_dictionary_list = [...state.list, action.dictionary];\n      return { list: new_dictionary_list };\n    }\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}